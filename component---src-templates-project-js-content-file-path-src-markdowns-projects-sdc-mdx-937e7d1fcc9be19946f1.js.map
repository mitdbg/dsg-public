{"version":3,"file":"component---src-templates-project-js-content-file-path-src-markdowns-projects-sdc-mdx-937e7d1fcc9be19946f1.js","mappings":"wLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uhCAAwhC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,skCAAukC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4hCAA6hC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4uCAA6uC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,+kBAAglB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yCAA0CK,EAAAA,cAAoBR,EAAYI,EAAG,CACz0KK,KAAM,yDACL,mBAAoB,KAAM,KAAMD,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,gBAAiB,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6CAC/I,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,yFCHA,MAAMa,EAAgBC,EAAAA,QAAEC,GAAEC,WAAA,CAAAC,YAAA,wBAAAC,YAAA,eAAJJ,CAAI,uCACtBK,EAAAA,IAIEC,GAAYN,EAAAA,EAAAA,SAAEO,EAAAA,GAAgBL,WAAA,CAAAC,YAAA,oBAAAC,YAAA,eAAlBJ,CAAkB,iFAO9BQ,EAAkBC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAASF,EACvC,MAAOG,KAAMC,aAAa,MAACC,EAAK,MAAEC,KAAWL,EACvCM,GAAUC,EAAAA,EAAAA,KAAiBC,EAAAA,EAAAA,GAASJ,IAC1C,OAAOnB,EAAAA,cAAoBwB,EAAAA,EAAQ,KAAMxB,EAAAA,cAAoBW,EAAUlB,OAAOC,OAAO,CACnF+B,IAAK,OACJJ,EAAS,CACVK,MAAO,CACL,OAAU,SAEZC,UAAW,eACXC,gBAAiB,YACf5B,EAAAA,cAAoBI,EAAc,KAAMgB,IAASpB,EAAAA,cAAoB6B,EAAAA,GAAS,KAAM7B,EAAAA,cAAoB8B,EAAAA,GAAa,KAAMd,IAAW,EAE/He,EAAOA,IAAM/B,EAAAA,cAAoBgC,EAAAA,EAAK,CACjDZ,MAAO,YAiBM,SAASa,EAAiB1C,GACvC,OAAOS,EAAAA,cAAoBa,EAAiBtB,EAAOS,EAAAA,cAAoBkC,EAAqB3C,GAC9F,C","sources":["webpack:///./src/markdowns/projects/sdc.mdx","webpack:///./src/templates/project.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Historically, DBMSes have adopted a monolithic architecture, with the system under control of all aspects of data management, including data placement, layout, scheduling, allocation of computation and memory to queries, as well as query optimization and execution. In the cloud, data services are increasingly disaggregated, with a reliable storage layer (e.g., Amazon S3) managed by the cloud provider, file-based data structured data (e.g., Parquet files), often produced by applications outside the data management layer, and a variety of high-level interfaces to the data (e.g., SQL, machine learning applications, data visualization engines). This enables a separation of concerns, where each layer is managed and scaled independently, unlike the “shared nothing” designs of conventional DBMSes where physical nodes that store data are created for each processing node that operates on this data. The rise in popularity of data processing systems like Spark is driven by their successful adoption of this new style of cloud architecture.\"), \"\\n\", React.createElement(_components.p, null, \"While the success of these new systems demonstrates the advantages of this new way of architecting data-driven applications, disaggregation leaves a great deal of performance on the table. For example, when running TPC-H, the disaggregated version of Amazon Redshift, called Redshift Spectrum is at least 8X slower than Redshift itself. This inefficiency is partly due to the layered design of Spectrum, which requires it to load data from underlying S3 files, preventing it from sharing information about data structure and representation between the storage and query execution layers, and partly due to the fact that S3 is lower bandwidth and higher latency to local storage.\\nBecause important metadata is not preserved by low-level cloud storage formats like Parquet, data processing systems operating on such data often lack performance-related metadata such as histograms, and other statistics that are key to good performance, preventing them from optimizing layouts for efficient storage, especially on lower-performance cloud storage where optimizing access is even more critical.\"), \"\\n\", React.createElement(_components.p, null, \"What is needed is a way to build efficient data systems on the cloud while maintaining the advantages of disaggregation. Our key insight is that cloud data systems can be much more efficient if they have a storage layer rich enough to support modern data storage optimizations that are at the heart of high-performance data analytics systems, including indexing, flexible multi-dimensional partitioning, compression, and ability to adapt to the workloads that run on them. To this end, we are building a cloud-optimized storage format, called self-organizing data containers (SDCs). By self-organizing we mean that the container has the flexibility to take on many possible layouts, and that it adapts to the clients’ workload as they interact with it. Unlike systems that implement transactional operations on cloud object stores like Delta Lake, Hudi, and Iceberg, SDCs are meta-data rich and capture data distributions and access patterns, and can represent complex storage layouts encompassing different partitioning and replication strategies.\"), \"\\n\", React.createElement(_components.p, null, \"Specifically, by tightly coupling meta-data, including distributional statistics, indexes, and access patterns, with the data itself, SDCs naturally contain the information needed to support efficient data access. Most cloud storage systems view data objects as immutable; however, they confound immutability of the logical contents of blocks (i.e., the set of records stored in each file) with the physical layout of data (i.e., whether records are column-oriented, compressed, etc). In SDCs, different physical representations, including summaries, aggregates, different columnar and row-oriented layouts, and data layout optimizations for modern hardware (GPU/CPU) can be represented in a single data object, and those layouts can be transformed and adapted over time as the access patterns shift. Hence, SDCs physically mutate over time, “self-organizing” into the optimal layout, even if the data itself remains immutable. Our vision towards such self-organization is influenced by our work on instance-optimized systems over the past several years like Flood, Tsunami, CopyRight, MTO, SageDB, etc. where we have shown that by building data layouts that adapt to both the data and the queries that run on them, dramatic performance gains are possible.\"), \"\\n\", React.createElement(_components.p, null, \"Once we have SDCs, many existing systems, including conventional relational databases, parallel data processing frameworks, and ML systems can be easily adapted to use our new table format. By building on our prior work on cross-layer optimization like Tupleware, Weld, Tuplex, etc., and instance-optimized storage systems, we believe we can construct next generation cloud-processing systems on SDCs that preserve the flexibility of conventional systems while offering order-of-magnitude performance gains that rival the performance of monolithic systems running on bare-metal hardware.\"), \"\\n\", React.createElement(_components.p, null, \"For more details, please refer to our \", React.createElement(_components.a, {\n    href: \"https://www.cidrdb.org/cidr2022/papers/p44-madden.pdf\"\n  }, \"CIDR 2022 paper\"), \".\"), \"\\n\", React.createElement(_components.h3, null, \"Participants\"), \"\\n\", React.createElement(_components.p, null, \"Tim Kraska, Sam Madden, Sivaprasad Sudhir\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/sylviaziyuzhang/Desktop/personal branding/DSG related/dsg-public/src/markdowns/projects/sdc.mdx\";\nimport React from 'react';\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport BackgroundImage from 'gatsby-background-image';\nimport {getImage} from 'gatsby-plugin-image';\nimport {convertToBgImage} from 'gbimage-bridge';\nimport s from 'styled-components';\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport {LIBRE_BOLD} from '../utils/font';\nimport {Wrapper} from '../components/shared';\nconst ProjectTitle = (s.h2)`\n  ${LIBRE_BOLD}\n  color: white;\n  padding-left: 1rem;\n`;\nconst StyledBg = (s(BackgroundImage))`\n  &::before, &::after {\n    filter: brightness(40%);\n  }\n  display: flex;\n  align-items: center;\n`;\nconst ProjectTemplate = ({data, children}) => {\n  const {mdx: {frontmatter: {image, title}}} = data;\n  const bgImage = convertToBgImage(getImage(image));\n  return React.createElement(Layout, null, React.createElement(StyledBg, Object.assign({\n    Tag: \"div\"\n  }, bgImage, {\n    style: {\n      'height': '400px'\n    },\n    className: \"align-middle\",\n    backgroundColor: \"#ebeef2\"\n  }), React.createElement(ProjectTitle, null, title)), React.createElement(Wrapper, null, React.createElement(MDXProvider, null, children)));\n};\nexport const Head = () => React.createElement(Seo, {\n  title: \"Project\"\n});\nexport const query = graphql`\n  query($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, quality: 100, formats: [AUTO, WEBP, AVIF])\n          }\n        }\n      }\n    }\n  }\n`;\nProjectTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ProjectTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h3","_provideComponents","components","React","href","wrapper","MDXLayout","ProjectTitle","s","h2","withConfig","displayName","componentId","LIBRE_BOLD","StyledBg","BackgroundImage","ProjectTemplate","_ref","data","children","mdx","frontmatter","image","title","bgImage","convertToBgImage","getImage","Layout","Tag","style","className","backgroundColor","Wrapper","MDXProvider","Head","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}