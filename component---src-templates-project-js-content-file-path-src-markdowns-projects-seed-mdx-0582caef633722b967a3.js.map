{"version":3,"file":"component---src-templates-project-js-content-file-path-src-markdowns-projects-seed-mdx-0582caef633722b967a3.js","mappings":"wLAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8sDAAqtD,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yUAA0U,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gwBAAiwB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,ygCAA0gC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,wfAAyf,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yCAA0CK,EAAAA,cAAoBR,EAAYI,EAAG,CACnrJK,KAAM,oDACL,SAAU,KAAM,KAAMD,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,gBAAiB,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,uHACrI,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,yFCHA,MAAMa,EAAgBC,EAAAA,QAAEC,GAAEC,WAAA,CAAAC,YAAA,wBAAAC,YAAA,eAAJJ,CAAI,uCACtBK,EAAAA,IAIEC,GAAYN,EAAAA,EAAAA,SAAEO,EAAAA,GAAgBL,WAAA,CAAAC,YAAA,oBAAAC,YAAA,eAAlBJ,CAAkB,iFAO9BQ,EAAkBC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAASF,EACvC,MAAOG,KAAMC,aAAa,MAACC,EAAK,MAAEC,KAAWL,EACvCM,GAAUC,EAAAA,EAAAA,KAAiBC,EAAAA,EAAAA,GAASJ,IAC1C,OAAOnB,EAAAA,cAAoBwB,EAAAA,EAAQ,KAAMxB,EAAAA,cAAoBW,EAAUlB,OAAOC,OAAO,CACnF+B,IAAK,OACJJ,EAAS,CACVK,MAAO,CACL,OAAU,SAEZC,UAAW,eACXC,gBAAiB,YACf5B,EAAAA,cAAoBI,EAAc,KAAMgB,IAASpB,EAAAA,cAAoB6B,EAAAA,GAAS,KAAM7B,EAAAA,cAAoB8B,EAAAA,GAAa,KAAMd,IAAW,EAE/He,EAAOA,IAAM/B,EAAAA,cAAoBgC,EAAAA,EAAK,CACjDZ,MAAO,YAiBM,SAASa,EAAiB1C,GACvC,OAAOS,EAAAA,cAAoBa,EAAiBtB,EAAOS,EAAAA,cAAoBkC,EAAqB3C,GAC9F,C","sources":["webpack:///./src/markdowns/projects/seed.mdx","webpack:///./src/templates/project.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Data curation tasks that discover, extract, transform, clean, and integrate data are critical for a wide variety of organizations. Despite significant efforts from the data management community, many sources still report that data scientists still spend over 80% of their time on these tasks. A key reason for this is that applications in different domains have diverse requirements, with no one-size-fits-all solution existing even for single data curation tasks.\\nFor example, for the task of data extraction, extracting monetary amounts can be effectively done by a regular expression such as that searches for a dollar sign followed by digits separated by commas and periods, i.e., \\\"$\\\\d[\\\\d|,|.]\\\", while extracting human names requires a totally different method such as searching for capitalized words near salutations like \\\"Mr.\\\" or \\\"Ms.\\\".\\nBecause of cases like this, generic off-the-shelf tools are rarely sufficient.\\nInstead, data scientists often have to develop application-specific solutions that are tailored to both the dataset and the problem domain, such as domain-specific code (like the regex above) or machine learning models trained on a large number of annotated examples to perform these types of tasks.\\nAs a result, devising a data curation solution for a particular scenario is time-consuming, with multiple rounds of requirement generation, training data collection, model/algorithm development, and testing with both data scientists and domain experts, and rarely reusable from one deployment to the next.\\nThis can be quite costly for enterprises -- for example, Citadel employs over 50 data management experts to deliver high-quality cleaned data to their analysts -- costing them tens of millions each year.\"), \"\\n\", React.createElement(_components.p, null, \"Our Approach: SEED\\nIn this work, we propose SEED, an LLM-as-compiler approach which, allows users to describe a data curation task via a natural language specification, along with an input data. SEED automatically compiles this specification into an instance-optimized solution tailored for the data and application at hand.\"), \"\\n\", React.createElement(_components.p, null, \"The key insight is that LLMs -- with their impressive ability to generate code, perform reasoning, understand the semantics of data, and encode common knowledge -- will lead to a paradigm shift in data curation research and make it possible to automatically construct data curation solutions on the fly. Indeed, prior work has shown that LLMs can be remarkably effective at addressing specific data curation tasks.\\nUnlike these prior works, which rely directly on LLMs for processing every record in a data curation task, SEED instead aims to use LLMs to generate domain-specific modules for different data curation tasks, some of which may involve direct invocation of LLMs and some of which are LLM-generated but do not use the LLM once they have been produced.\"), \"\\n\", React.createElement(_components.p, null, \"Specifically, the SEED compiler generates an execution pipeline composed of code, small machine learning models, as well as direct invocations of the LLM itself on (some) individual data records. In this execution pipeline, modules use LLMs in a variety of ways. For example, code is synthesized by the LLM to provide a domain-specific solution (e.g., a regular expression for extracting monetary amounts) and small models are trained on labels generated by the LLM. If these modules are not confident about the results on some records, SEED will forward them to the LLM module, which, although expensive, is often able to perform complex, human-like reasoning tasks on data items. For each request, the LLM module may further employ tools that retrieve relevant information from a database or other user-supplied data to assist the LLM in solving the task. Here, SEED leverages the reasoning ability of LLMs to determine on a case-by-case basis what additional information and tools will be helpful in solving the specific task.\"), \"\\n\", React.createElement(_components.p, null, \"In this way, SEED leverages LLMs' synthesis, reasoning, semantics understanding abilities as well as the encoded common knowledge to construct a domain-specific solution.\\nIdeally, users do not need to manually code modules or annotate a large number of training examples.\\nMoreover, unlike prior work on using LLMs for data curation tasks, SEED does not require expensive LLM invocations on every data record, which suffers from scalability, efficiency, and cost issues when handling large datasets.\"), \"\\n\", React.createElement(_components.p, null, \"For more details, please refer to our \", React.createElement(_components.a, {\n    href: \"https://anonymous.4open.science/r/SEED/paper.pdf\"\n  }, \"paper\"), \".\"), \"\\n\", React.createElement(_components.h3, null, \"Participants\"), \"\\n\", React.createElement(_components.p, null, \"Zui Chen, Lei Cao, Sam Madden, Tim Kraska, Zeyuan Shang, Ju Fan, Nan Tang, Zihui Gu, Chunwei Liu, Michael Cafarella\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/peterchen/Desktop/Everything/Github/dsg-public/src/markdowns/projects/seed.mdx\";\nimport React from 'react';\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {Link} from \"gatsby\";\nimport BackgroundImage from 'gatsby-background-image';\nimport {getImage} from 'gatsby-plugin-image';\nimport {convertToBgImage} from 'gbimage-bridge';\nimport s from 'styled-components';\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport {LIBRE_BOLD} from '../utils/font';\nimport {Wrapper} from '../components/shared';\nconst ProjectTitle = (s.h2)`\n  ${LIBRE_BOLD}\n  color: white;\n  padding-left: 1rem;\n`;\nconst StyledBg = (s(BackgroundImage))`\n  &::before, &::after {\n    filter: brightness(40%);\n  }\n  display: flex;\n  align-items: center;\n`;\nconst ProjectTemplate = ({data, children}) => {\n  const {mdx: {frontmatter: {image, title}}} = data;\n  const bgImage = convertToBgImage(getImage(image));\n  return React.createElement(Layout, null, React.createElement(StyledBg, Object.assign({\n    Tag: \"div\"\n  }, bgImage, {\n    style: {\n      'height': '400px'\n    },\n    className: \"align-middle\",\n    backgroundColor: \"#ebeef2\"\n  }), React.createElement(ProjectTitle, null, title)), React.createElement(Wrapper, null, React.createElement(MDXProvider, null, children)));\n};\nexport const Head = () => React.createElement(Seo, {\n  title: \"Project\"\n});\nexport const query = graphql`\n  query($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, quality: 100, formats: [AUTO, WEBP, AVIF])\n          }\n        }\n      }\n    }\n  }\n`;\nProjectTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ProjectTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h3","_provideComponents","components","React","href","wrapper","MDXLayout","ProjectTitle","s","h2","withConfig","displayName","componentId","LIBRE_BOLD","StyledBg","BackgroundImage","ProjectTemplate","_ref","data","children","mdx","frontmatter","image","title","bgImage","convertToBgImage","getImage","Layout","Tag","style","className","backgroundColor","Wrapper","MDXProvider","Head","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}