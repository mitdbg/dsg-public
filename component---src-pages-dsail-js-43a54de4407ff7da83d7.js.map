{"version":3,"file":"component---src-pages-dsail-js-43a54de4407ff7da83d7.js","mappings":"8vDAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,udAAwd,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,o0BAAq0B,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,w6BAAy6B,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,y0BAA00B,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,iMACxyG,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,mBCDA,MAAMU,EAAUC,EAAAA,QAAEC,IAAGC,WAAA,CAAAC,YAAA,iBAAAC,YAAA,eAALJ,CAAK,uBACjBK,EAAAA,IAqCSC,EAAOA,IAAMV,EAAAA,cAACW,EAAAA,EAAG,CAACC,MAAM,UAErC,MAnCkBC,IAChBb,EAAAA,cAACc,EAAAA,EAAM,CAACC,OAAK,GACXf,EAAAA,cAACgB,EAAAA,GAAO,KACNhB,EAAAA,cAACiB,EAAQ,OAGXjB,EAAAA,cAAA,OAAKkB,UAAU,MAAMC,MAAO,CAAEC,OAAQ,WACpCpB,EAAAA,cAAA,OAAKkB,UAAU,aAAY,IAAClB,EAAAA,cAACqB,EAAAA,EAAW,CAACC,IAAI,8BAA8BC,YAAY,UAASC,YAAAC,EAAA,OAAG,MACnGzB,EAAAA,cAACG,EAAO,CAACe,UAAU,YAAW,kQAGhClB,EAAAA,cAACgB,EAAAA,GAAO,KACNhB,EAAAA,cAAA,OAAKkB,UAAU,iCACblB,EAAAA,cAAA,OAAKkB,UAAU,YACblB,EAAAA,cAACqB,EAAAA,EAAW,CAACC,IAAI,6BAA6BC,YAAY,UAASC,YAAAC,EAAA,SAErEzB,EAAAA,cAAA,OAAKkB,UAAU,YACflB,EAAAA,cAACqB,EAAAA,EAAW,CAACC,IAAI,6BAA6BC,YAAY,UAASC,YAAAC,EAAA,SAEnEzB,EAAAA,cAAA,OAAKkB,UAAU,YACflB,EAAAA,cAACqB,EAAAA,EAAW,CAACC,IAAI,4BAA4BC,YAAY,UAASC,YAAAC,EAAA,SAElEzB,EAAAA,cAACG,EAAO,KAAC,sH,sgJCLV,MAAMuB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiB5B,GAC/B,MAAM6B,EAAoB,aAAiBF,GAG3C,OAAO,UAAc,IAEO,mBAAf3B,EACFA,EAAW6B,GAGb,IAAIA,KAAsB7B,GAChC,CAAC6B,EAAmB7B,GACzB,CAGA,MAAM8B,EAAc,CAAC,EAQd,SAASC,GAAY,WAAC/B,EAAU,SAAEgC,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfjC,EACHA,EAAW,CAAC,GACZA,GAAc8B,EAEJF,EAAiB5B,GAG5B,gBACL2B,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack:///./src/markdowns/dsail.mdx","webpack:///./src/pages/dsail.js","webpack:///./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Over the past decade, AI has made substantial methodological advances in learning the complex relationships that have evolved among data.\\nIn addition, “deep learning” has excelled at a number of perceptual tasks, including image recognition and speech processing.\\nThese enhancements have enabled applications from personal digital assistants to autonomous vehicles.\\nAn open question, however, is: How far can AI technology be pushed into other application domains?\"), \"\\n\", React.createElement(_components.p, null, \"We founded the Data Systems and AI Lab (DSAIL) to explore this frontier by going beyond the use of AI for automating\\nsimple perceptual tasks to investigating opportunities to enhance and optimize large-scale data systems and enterprise applications\\nwith learned components synthesized using AI.  This will include applying AI both to the construction of traditional data structures\\nsuch as indexes and database methods like query optimization, schema design, and logical and physical database design; and to algorithms\\nlike system load balancing and scheduling. In addition, large-scale enterprise applications, including data integration and predictive modelling,\\nare already benefiting from AI technology.  However, at enterprise scale, applying AI technology suffers from an absence of support tools and scalable algorithms.\"), \"\\n\", React.createElement(_components.p, null, \"To achieve our goals, several things need to happen.\\nFirst, we need new, efficient AI algorithms that can efficiently operate as a part of the inner-loop of large scale systems.\\nSecond, before AI can be widely used in mission-critical enterprise applications (as opposed to inherently imprecise applications like web search and information retrieval),\\nwe need new systems that systematically manage the process of collecting, cleaning and preparing data, as well as the process of building models and\\nintegrating them into deployed systems. Third, software systems and AI algorithms need to co-evolve to take advantage of emerging hardware trends including\\nspecialized accelerators, new high-speed interconnects and advanced memory technologies.\\nIf successful, the results of this research will change the way we build the large-scale systems of the future,\\nand the way that we use AI techniques inside the modern enterprise.\"), \"\\n\", React.createElement(_components.p, null, \"DSAIL was launched in 2018 Over this period DSAIL has become the leading research group for ML for Systems research,\\nproducing over 100 publications of which 40 papers involved at least one co-author from our industry partners.\\nWe deeply engaged with our industry partners, with 15 summer internships and 2 of our PhD graduates joining our lab sponsors as\\nfull-time employees ( many students out of the lab yet have to graduate). We organized 3 DSAIL retreats and 5 company-specific specific workshops\\nto exchange ideas on ML for Systems problems, educate, and learn from each other's problems and solutions. We also open-sourced many of our projects\\nand actively engaged with our industry partners in technology transfer. For example, both Microsoft and Google have incorporated ideas out of our lab into their commercial products.\"), \"\\n\", React.createElement(_components.p, null, \"DSAIL phase 2, launched in 2022, aims to continue this trajectory of deep collaboration with our industry partners,\\ncoupled with leading-edge research in applying learning to data systems.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport s from 'styled-components'\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport DsailMDX from '../markdowns/dsail.mdx'\nimport { GEORGIA_REGULAR, LIBRE_BOLD } from '../utils/font'\nimport { Wrapper } from '../components/shared'\n\nconst Caption = s.div`\n  ${LIBRE_BOLD}\n  font-size: 105%\n`\n\nconst DsailPage = () => (\n  <Layout dsail>\n    <Wrapper>\n      <DsailMDX />\n    </Wrapper>\n\n    <div className=\"row\" style={{ margin: '0 1rem' }}>\n      <div className=\"col-md-10\"> <StaticImage src='../images/dsail/retreat.jpg' placeholder=\"blurred\" />  </div>\n      <Caption className=\"col-md-2\"> Industry partners, researchers and students came together to share research progress and ideas at the first annual DSAIL Research Retreat, held November 1, 2019, in Cambridge, Mass. (Missing from photo: co-director Sam Madden, who’s taking the photo.) </Caption>\n    </div>\n\n    <Wrapper>\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-md-4\">\n          <StaticImage src='../images/dsail/amazon.png' placeholder=\"blurred\"/>\n        </div>\n        <div className=\"col-md-4\">\n        <StaticImage src='../images/dsail/google.png' placeholder=\"blurred\"/>\n        </div>\n        <div className=\"col-md-4\">\n        <StaticImage src='../images/dsail/intel.jpg' placeholder=\"blurred\" />\n        </div>\n        <Caption> DSAIL is also supported by NSF award 1900933 III: Medium: Learning-based Synthesis of Data Processing Engines. </Caption>\n      </div>\n    </Wrapper>\n  </Layout>\n)\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"DSAIL\" />\n\nexport default DsailPage\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","Caption","s","div","withConfig","displayName","componentId","LIBRE_BOLD","Head","Seo","title","DsailPage","Layout","dsail","Wrapper","DsailMDX","className","style","margin","StaticImage","src","placeholder","__imageData","require","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}